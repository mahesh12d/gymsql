AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SQLGym Postgres to S3 Data Pipeline

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  DatabaseSecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret containing database credentials (JSON format with keys - host, port, database, username, password)
  
  S3BucketName:
    Type: String
    Description: S3 bucket name for data storage
  
  SyncSchedule:
    Type: String
    Default: rate(1 day)
    Description: CloudWatch Events schedule expression

Globals:
  Function:
    Timeout: 900
    MemorySize: 3008
    Runtime: python3.11
    Architectures:
      - x86_64

Resources:
  # S3 Bucket for data storage
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldData
            Status: Enabled
            ExpirationInDays: 90
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: SQLGym

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref DatabaseSecretArn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'

  # Lambda Function
  PostgresToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Environment}-sqlgym-postgres-to-s3'
      CodeUri: lambda/
      Handler: handler.lambda_handler
      Description: Sync data from Neon Postgres to S3
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_SECRET_NAME: !Ref DatabaseSecretArn
          S3_BUCKET_NAME: !Ref S3BucketName
          ENVIRONMENT: !Ref Environment
          TABLES_CONFIG: !Sub |
            {
              "tables": {
                "users": {"updated_col": "updated_at"},
                "topics": {"updated_col": "updated_at"},
                "problems": {"updated_col": "updated_at"},
                "submissions": {"updated_col": null},
                "user_progress": {"updated_col": "updated_at"}
              }
            }
      Events:
        ScheduledSync:
          Type: Schedule
          Properties:
            Schedule: !Ref SyncSchedule
            Name: !Sub '${Environment}-postgres-sync-schedule'
            Description: Trigger Postgres to S3 sync
            Enabled: true
      Tags:
        Environment: !Ref Environment
        Project: SQLGym

  # CloudWatch Log Group
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PostgresToS3Function}'
      RetentionInDays: 7

  # CloudWatch Alarm for Lambda Errors
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-sqlgym-sync-errors'
      AlarmDescription: Alert when Lambda function encounters errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PostgresToS3Function

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt PostgresToS3Function.Arn
    Export:
      Name: !Sub '${Environment}-postgres-sync-lambda-arn'
  
  S3BucketName:
    Description: S3 bucket for data storage
    Value: !Ref DataLakeBucket
    Export:
      Name: !Sub '${Environment}-data-lake-bucket'
  
  LambdaExecutionRoleArn:
    Description: ARN of Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${Environment}-lambda-execution-role-arn'
